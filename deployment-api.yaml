AWSTemplateFormatVersion: "2010-09-09"
Description: This is my fist lambda stack deployed by sam
Resources:
  mongoLambda:
    Type: AWS::Lambda::Function
    Description: Automated lambda with mongo
    Properties:
      FunctionName: mongoLambda
      Architectures:
        - x86_64
      MemorySize: 512
      Role: !GetAtt GenericLambdaRole.Arn
      Code: build/libs/dayoffmongo-lambda-0.1-lambda.zip
      Handler: io.micronaut.function.aws.MicronautRequestStreamHandler
      Runtime: provided.al2

  GenericLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
        - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'SecretsManagerParameterAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParam*
                  - ssm:DescribeParam*
                  - kms:GetSecretValue
                  - kms:Decrypt
                Resource:
                  - arn:aws:ssm:*:*:parameter/*

  apiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "example-api-gw"
      Description: "Example API"

  ProxyResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt apiGateway.RootResourceId
      RestApiId: !Ref apiGateway
      PathPart: '{proxy+}'

  apiGatewayRootMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: 200
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt mongoLambda.Arn
      ResourceId: !Ref ProxyResource
      RestApiId: !Ref "apiGateway"



  apiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "apiGatewayRootMethod"
    Properties:
      RestApiId: !Ref apiGateway
      StageName: dev

  lambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt mongoLambda.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*/*"

